let running = !1; function getRandomInt(e, t) { let n, a; return n = Math.ceil(Number(e)), a = Math.floor(Number(t)), Math.floor(Math.random() * (a - n + 1)) + n } let INPUT = "", graph = [], maxIntersections = 250, maxStreets = 500; function getData() { if (running) return toast("The engine is alerdy running, please wait..."), !1; let e = document.getElementById("duration").value, t = document.getElementById("intersections").value, n = document.getElementById("streets").value, a = document.getElementById("totalCars").value, o = document.getElementById("bonusPoints").value, l = 3, d = document.getElementById("maxStreetsInPath").value; if (toast("Validating data..."), (e <= 1 || e > 1e4 || "" == e) && (e = getRandomInt(1, 1e4)), (t <= 2 || t > 1e5 || "" == t) && (t = getRandomInt(2, 1e5)), "auto" == n) { let e = 3 * Math.floor(4 * Math.random()), a = Math.floor(2 * Math.random()) + 9, o = Math.floor(3 * Math.random()) + 7, l = Math.floor(2 * Math.sqrt(t)), d = Math.floor(Math.sin(2 * Math.random() * Math.PI) * l) + 1, r = Math.floor(Math.cos(2 * Math.random() * Math.PI) * l) + 1, s = Math.floor(Math.tan(2 * Math.random() * Math.PI) * l) + 1; n = Math.floor(e + a + o + l + d + r + s), n < 0 && (n *= -1), n < t && (n += t) } else n *= t; console.log(n), (a <= 1 || a > 1e3 || "" == a) && (a = getRandomInt(1, 1e3)), (o <= 1 || o > 1e3 || "" == o) && (o = getRandomInt(1, 1e3)), (l <= 3 || l > 8 || "" == l) && (l = getRandomInt(3, 8)), (d <= 2 || d > n / 2 || "" == d) && (d = getRandomInt(2, n / 2)); Math.floor(n / l); document.getElementById("data").classList.add("hidden"), document.getElementById("running").classList.remove("hidden"), document.getElementById("loading").classList.remove("hidden"), console.time("Generation time"), setTimeout((() => { generateInputFile(e, t, n, a, o, l, d) }), 500) } function generateInputFile(e, t, n, a, o, l, d) { running = !0, toast("Generating input file..."); let r = ""; r += `${e} ${t} ${n} ${a} ${o}\n`; let s = 0, m = new Set, u = Math.floor(e / 7); for (let e = 0; e < n; e++) { 0 == e % t && (s += 1); let n = `${e % t} ${(e % t + s) % t} ${generateStreetName()}${e} ${getRandomInt(1, u)}`, a = i(n); m.has(n) || m.has(a) || m.add(n) } function i(e) { let t = e.split(" "); return t[1] + " " + t[0] + " " + t[2] + " " + t[3] } let c = Array.from(m); c.sort((() => Math.random() - .5)), c.forEach((e => { r += `${e}\n`, t < maxIntersections && n < maxStreets && graph.push(e) })), INPUT = r, toast("Generating car paths..."); let g = generateCarPaths(INPUT, d), h = ""; for (let e = 0; e < g.length; e++) { let t = g[e], n = `${t.length} ${t.join(" ")}\n`; INPUT += n, h += n } if (t < maxIntersections && n < maxStreets) { toast("Generating graph..."); let e = graph.join("\n"), t = h; try { createGraph(e, "cy"), document.getElementById("cy").classList.remove("hidden") } catch (e) { console.log("Error creating graph"), document.getElementById("cy").classList.add("hidden") } try { document.getElementById("cy2").classList.remove("hidden"), generateGraph2(t) } catch (e) { console.log("Error creating graph of cars"), document.getElementById("cy2").classList.add("hidden") } try { generateGraph(e), document.getElementById("cy1").classList.remove("hidden") } catch (e) { console.log("Error creating graph"), document.getElementById("cy1").classList.add("hidden") } document.getElementById("download").classList.remove("hidden") } else document.getElementById("textArea").classList.remove("hidden"), document.getElementById("download").classList.remove("hidden"), document.getElementById("textArea").value = INPUT; console.timeEnd("Generation time"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), running = !1 } function generateCarPaths(e, t) { let n = e.split("\n"), [a, o, l, d, r] = n[0].split(" ").map(Number), s = {}; for (let e = 1; e <= l; e++) { let t = n[e].split(" "); s[t[2]] = { start: parseInt(t[0]), end: parseInt(t[1]), length: parseInt(t[3]) } } let m = [], u = t; for (let e = 0; e < d; e++) { let e = [], t = Math.floor(Math.random() * o), n = new Set, l = 0, d = Math.floor(Math.random() * u) + 2; for (; e.length < d;) { n.add(t); let o = []; for (let [e, n] of Object.entries(s)) n.start === t && o.push(e); if (0 === o.length) break; let d = o[Math.floor(Math.random() * o.length)]; if (e.push(d), t = s[d].end, l += s[d].length, l > a) break } m.push(e) } return m } function downloadFile() { if ("" == INPUT) return void toast("Please generate the input file first"); let e = document.getElementById("export").value; if ("json" == e) { let e = convertDataToJSON(INPUT); const t = new Blob([e], { type: "application/json" }), n = URL.createObjectURL(t), a = document.createElement("a"); a.href = n, a.download = `D:${(new Date).getTime()}.json`, document.body.appendChild(a), a.click(), document.body.removeChild(a) } else if ("yaml" == e) { let e = dataToYAML(INPUT); const t = new Blob([e], { type: "application/x-yaml" }), n = URL.createObjectURL(t), a = document.createElement("a"); a.href = n, a.download = `D:${(new Date).getTime()}.yml`, document.body.appendChild(a), a.click(), document.body.removeChild(a) } else { const e = new Blob([INPUT], { type: "text/plain" }), t = URL.createObjectURL(e), n = document.createElement("a"); n.href = t, n.download = `D:${(new Date).getTime()}.txt`, document.body.appendChild(n), n.click(), document.body.removeChild(n) } toast("File downloaded successfully") } function convertDataToJSON(e) { toast("Converting data to JSON..."); let t = e.split("\n"), n = {}, [a, o, l, d, r] = t[0].split(" ").map(Number); return n.simulation = { duration: a, intersections: o, streets: l, cars: d, bonus: r }, n.streets = getStreets(t, l), n.cars = getCars(t, l), JSON.stringify(n) } function getStreets(e, t) { let n = []; for (let a = 1; a <= t; a++) { let [t, o, l, d] = e[a].split(" "); t = Number(t), o = Number(o), d = Number(d); let r = { start: t, end: o, name: l, time: d }; n.push(r) } return n } function getCars(e, t) { let n = []; for (let a = t + 1; a < e.length; a++) { let [t, ...o] = e[a].split(" "); t = Number(t); let l = { path_length: t, path: o }; t > 1 && n.push(l) } return n } function generateStreetNetwork(e) { let t = e.split("\n"), [n, a, o, l, d] = t[0].split(" ").map(Number), r = [], s = {}, m = [], u = {}; for (let e = 0; e < o; e++) { let e = generateStreetName(); for (; r.includes(e);)e = generateStreetName(); r.push(e); let t = Math.floor(Math.random() * a), n = Math.floor(Math.random() * a); for (; t === n;)n = Math.floor(Math.random() * a); let o = Math.floor(10 * Math.random()) + 1; s[e] = { start: t, end: n, length: o }, u[t] || (u[t] = []), u[n] || (u[n] = []), u[t].push({ street: e, time: o }), u[n].push({ street: e, time: o }) } for (let e = 0; e < l; e++) { let e = [], t = r[Math.floor(Math.random() * r.length)]; e.push(t); let a = new Set; a.add(t); let o = 0; for (; o < n;) { o += s[t].length; let n = []; for (let [e, a] of Object.entries(s)) a.start === s[t].end && n.push(e); if (0 === n.length) break; let l = n.filter((e => !a.has(e)))[Math.floor(Math.random() * n.filter((e => !a.has(e))).length)]; l || (l = n[Math.floor(Math.random() * n.length)]), e.push(l), t = l, a.add(t) } m.push(e) } return { streetNames: r, streetMap: s, carPaths: m } } function generateStreetName() { if (1 == document.getElementById("names").value) return "street"; let e = ["rue", "avenue", "boulevard", "place", "square", "lane", "road", "street"], t = ["de", "d'", "du", "des", "le", "la", "les"], n = ["paris", "berlin", "london", "rome", "athens", "moscow", "tokyo", "newyork", "lisbon", "madrid", "cairo", "beijing", "sydney", "rio", "prishtina"], a = e[Math.floor(Math.random() * e.length)], o = n[Math.floor(Math.random() * n.length)], l = a + " "; if (Math.random() < .5) { l += t[Math.floor(Math.random() * t.length)] + " " } return l += o, l = l.replace(/\s/g, "_"), l } function preset(e) { switch (toast("Loading preset..."), e) { case "downtownrush": document.getElementById("duration").value = 750, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 5, document.getElementById("totalCars").value = 500, document.getElementById("bonusPoints").value = 800, document.getElementById("maxStreetsInPath").value = 4; break; case "suburbanserenity": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 80, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 300, document.getElementById("bonusPoints").value = 300, document.getElementById("maxStreetsInPath").value = 3; break; case "industrialhustle": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 120, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 5; break; case "coastalcruise": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 150, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 6; break; case "mountainretreat": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 90, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 4; break; case "historicjourney": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 110, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 450, document.getElementById("bonusPoints").value = 400, document.getElementById("maxStreetsInPath").value = 3; break; case "metropolitanmadness": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 180, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 800, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 5; break; case "ruralrespite": document.getElementById("duration").value = 600, document.getElementById("intersections").value = 70, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 200, document.getElementById("bonusPoints").value = 250, document.getElementById("maxStreetsInPath").value = 3; break; case "technologyhub": document.getElementById("duration").value = 1e3, document.getElementById("intersections").value = 200, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 6; break; case "universitytown": document.getElementById("duration").value = 500, document.getElementById("intersections").value = 130, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 600, document.getElementById("bonusPoints").value = 650, document.getElementById("maxStreetsInPath").value = 4; break; default: document.getElementById("duration").value = 500, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 3 }window.scrollTo({ top: 0, behavior: "smooth" }) } function toast(e, t = 4500, n = 0) { setTimeout((() => { const n = document.createElement("div"); n.className = "fixed top-4 right-4 flex items-center justify-center w-64 p-4 bg-gray-900 text-white rounded-md shadow-md", n.style.padding = "12px", n.style.maxHeight = "500px", n.style.overflow = "auto", n.style.width = "fit-content", n.style.zIndex = "9999"; const a = document.createElement("span"); a.className = "whitespace-nowrap overflow-hidden overflow-ellipsis", a.textContent = e, n.appendChild(a), document.body.appendChild(n), setTimeout((() => { n.classList.add("opacity-0"), setTimeout((() => { n.remove() }), 300) }), t), toast.dismiss = function () { n.classList.add("opacity-0"), setTimeout((() => { n.remove() }), 300) } }), n) }