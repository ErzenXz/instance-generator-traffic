let running = !1; function getRandomInt(e, t) { let n, l; return n = Math.ceil(Number(e)), Math.floor(Math.random() * ((l = Math.floor(Number(t))) - n + 1)) + n } let INPUT = "", graph = [], maxIntersections = 250, maxStreets = 500; function getData() { if (running) return alert("The engine is alerdy running, please wait..."), !1; let e = document.getElementById("duration").value, t = document.getElementById("intersections").value, n = document.getElementById("streets").value, l = document.getElementById("totalCars").value, a = document.getElementById("bonusPoints").value, r = 3, d = document.getElementById("maxStreetsInPath").value; if ((e <= 1 || e > 1e4 || "" == e) && (e = getRandomInt(1, 1e4)), (t <= 2 || t > 1e5 || "" == t) && (t = getRandomInt(2, 100)), "auto" == n) { let s = Math.floor(2 * Math.sqrt(t)); (n = Math.floor(3 * Math.floor(4 * Math.random()) + (Math.floor(2 * Math.random()) + 9) + (Math.floor(3 * Math.random()) + 7) + s + (Math.floor(Math.sin(2 * Math.random() * Math.PI) * s) + 1) + (Math.floor(Math.cos(2 * Math.random() * Math.PI) * s) + 1) + (Math.floor(Math.tan(2 * Math.random() * Math.PI) * s) + 1))) < 0 && (n *= -1), n < t && (n += t) } else n *= t; (l <= 1 || l > 1e3 || "" == l) && (l = getRandomInt(1, 500)), (a <= 1 || a > 1e3 || "" == a) && (a = getRandomInt(1, 1e3)), (r <= 3 || r > 8 || "" == r) && (r = getRandomInt(3, 27)); let o = n / 2; (d <= 2 || d > o || "" == d) && (d = getRandomInt(2, n / 2)), document.getElementById("data").classList.add("hidden"), document.getElementById("running").classList.remove("hidden"), document.getElementById("loading").classList.remove("hidden"), console.time("Generation time"); "1" == document.getElementById("engine").value ? setTimeout(() => { generateInputFile(e, t, n, l, a, r, d) }, 500) : setTimeout(() => { generateInputFile2(e, t, n, l, a, r, d) }, 500) } function generateInputFile(e, t, n, l, a, r, d) {
    running = !0; let s = performance.now(), o = ""; o += `${e} ${t} ${n} ${l} ${a}
`; let i = Array(t).fill(!1), m = new Set, g = Math.floor(e / 7); for (let u = 0; u < n; u++) { let y, c, I = 0; do if (y = getRandomInt(0, t - 1), c = getRandomInt(0, t - 1), ++I > 1e3) { console.error("Exceeded maximum attempts to find suitable intersections."); break } while (y === c || i[y] || i[c]); i[y] = !0, i[c] = !0; let $ = `${y} ${c} ${generateStreetName()}${u} ${getRandomInt(1, g)}`, E = h($); m.has($) || m.has(E) || m.add($) } function h(e) { let t = e.split(" "); return t[1] + " " + t[0] + " " + t[2] + " " + t[3] } let B = Array.from(m); B.sort(() => Math.random() - .5), B.forEach(e => {
        o += `${e}
`, t < maxIntersections && n < maxStreets && graph.push(e)
    }); let v = generateCarPaths(INPUT = o, d), f = ""; for (let p = 0; p < v.length; p++) {
        let _ = v[p], b = `${_.length} ${_.join(" ")}
`; INPUT += b, f += b
    } if (document.getElementById("cy").innerHTML = "", document.getElementById("cy1").innerHTML = "", document.getElementById("cy2").innerHTML = "", document.getElementById("textArea").value = "", t < maxIntersections && n < maxStreets) { let L = graph.join("\n"), P = f; try { createGraph(L, "cy"), document.getElementById("cy").classList.remove("hidden") } catch (x) { console.log("Error creating graph"), document.getElementById("cy").classList.add("hidden") } try { document.getElementById("cy2").classList.remove("hidden"), generateGraph2(P) } catch (w) { console.log("Error creating graph of cars"), document.getElementById("cy2").classList.add("hidden") } try { generateGraph(L), document.getElementById("cy1").classList.remove("hidden") } catch (k) { console.log("Error creating graph"), document.getElementById("cy1").classList.add("hidden") } document.getElementById("download").classList.remove("hidden") } else document.getElementById("textArea").classList.remove("hidden"), document.getElementById("download").classList.remove("hidden"), document.getElementById("textArea").value = INPUT; console.timeEnd("Generation time"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"); let S; toast(`Generation time: ${((performance.now() - s) / 1e3).toFixed(2)} seconds`), running = !1
} function generateInputFile2(e, t, n, l, a, r, d) {
    running = !0; let s = performance.now(), o = ""; o += `${e} ${t} ${n} ${l} ${a}
`; let i = 0, m = new Set, g = Math.floor(e / 7); for (let u = 0; u < n; u++) { 0 == u % t && (i += 1); let y = `${u % t} ${(u % t + i) % t} ${generateStreetName()}${u} ${getRandomInt(1, g)}`, c = I(y); m.has(y) || m.has(c) || m.add(y) } function I(e) { let t = e.split(" "); return t[1] + " " + t[0] + " " + t[2] + " " + t[3] } let $ = Array.from(m); $.sort(() => Math.random() - .5), $.forEach(e => {
        o += `${e}
`, t < maxIntersections && n < maxStreets && graph.push(e)
    }); let E = generateCarPaths(INPUT = o, d), h = ""; for (let B = 0; B < E.length; B++) {
        let v = E[B], f = `${v.length} ${v.join(" ")}
`; INPUT += f, h += f
    } if (document.getElementById("cy").innerHTML = "", document.getElementById("cy1").innerHTML = "", document.getElementById("cy2").innerHTML = "", document.getElementById("textArea").value = "", t < maxIntersections && n < maxStreets) { let p = graph.join("\n"), _ = h; try { createGraph(p, "cy"), document.getElementById("cy").classList.remove("hidden") } catch (b) { console.log("Error creating graph"), document.getElementById("cy").classList.add("hidden") } try { document.getElementById("cy2").classList.remove("hidden"), generateGraph2(_) } catch (L) { console.log("Error creating graph of cars"), document.getElementById("cy2").classList.add("hidden") } try { generateGraph(p), document.getElementById("cy1").classList.remove("hidden") } catch (P) { console.log("Error creating graph"), document.getElementById("cy1").classList.add("hidden") } document.getElementById("download").classList.remove("hidden") } else document.getElementById("textArea").classList.remove("hidden"), document.getElementById("download").classList.remove("hidden"), document.getElementById("textArea").value = INPUT; console.timeEnd("Generation time"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"); let x; toast(`Generation time: ${((performance.now() - s) / 1e3).toFixed(2)} seconds`), running = !1
} function generateCarPaths(e, t) { let n = e.split("\n"), [l, a, r, d, s] = n[0].split(" ").map(Number), o = {}; for (let i = 1; i <= r; i++) { let m = n[i].split(" "); o[m[2]] = { start: parseInt(m[0]), end: parseInt(m[1]), length: parseInt(m[3]) } } let g = [], u = t, y = []; u < 2 && (u = 2); for (let c = 0; c < d; c++) { let I = [], $ = Math.floor(Math.random() * a), E = new Set, h = 0, B = Math.floor(Math.random() * u) + 1; for (B < 2 && (B = 2); I.length < B;) { E.add($); let v = []; for (let [f, p] of Object.entries(o)) p.start === $ && v.push(f); if (0 === v.length) break; let _ = v[Math.floor(Math.random() * v.length)]; if (I.push(_), $ = o[_].end, (h += o[_].length) > l) break } 0 == I.length && (I = [...y[Math.floor(Math.random() * y.length)]]), g.push(I), y.push(I) } return g } function downloadFile() { if ("" == INPUT) { alert("Please generate the input file first"); return } let e = document.getElementById("export").value; if ("json" == e) { let t = convertDataToJSON(INPUT), n = new Blob([t], { type: "application/json" }), l = URL.createObjectURL(n), a = document.createElement("a"); a.href = l, a.download = `D:${new Date().getTime()}.json`, document.body.appendChild(a), a.click(), document.body.removeChild(a) } else if ("yaml" == e) { let r = dataToYAML(INPUT), d = new Blob([r], { type: "application/x-yaml" }), s = URL.createObjectURL(d), o = document.createElement("a"); o.href = s, o.download = `D:${new Date().getTime()}.yml`, document.body.appendChild(o), o.click(), document.body.removeChild(o) } else { let i = new Blob([INPUT], { type: "text/plain" }), m = URL.createObjectURL(i), g = document.createElement("a"); g.href = m, g.download = `D:${new Date().getTime()}.txt`, document.body.appendChild(g), g.click(), document.body.removeChild(g) } location.reload() } function convertDataToJSON(e) { let t = e.split("\n"), n = {}, [l, a, r, d, s] = t[0].split(" ").map(Number); return n.simulation = { duration: l, intersections: a, streets: r, cars: d, bonus: s }, n.streets = getStreets(t, r), n.cars = getCars(t, r), JSON.stringify(n) } function getStreets(e, t) { let n = []; for (let l = 1; l <= t; l++) { let [a, r, d, s] = e[l].split(" "); a = Number(a), r = Number(r), s = Number(s); let o = { start: a, end: r, name: d, time: s }; n.push(o) } return n } function getCars(e, t) { let n = []; for (let l = t + 1; l < e.length; l++) { let [a, ...r] = e[l].split(" "); a = Number(a); let d = { path_length: a, path: r }; a > 1 && n.push(d) } return n } function generateStreetNetwork(e) { let [t, n, l, a, r] = e.split("\n")[0].split(" ").map(Number), d = [], s = {}, o = [], i = {}; for (let m = 0; m < l; m++) { let g = generateStreetName(); for (; d.includes(g);)g = generateStreetName(); d.push(g); let u = Math.floor(Math.random() * n), y = Math.floor(Math.random() * n); for (; u === y;)y = Math.floor(Math.random() * n); let c = Math.floor(10 * Math.random()) + 1; s[g] = { start: u, end: y, length: c }, i[u] || (i[u] = []), i[y] || (i[y] = []), i[u].push({ street: g, time: c }), i[y].push({ street: g, time: c }) } for (let I = 0; I < a; I++) { let $ = [], E = d[Math.floor(Math.random() * d.length)]; $.push(E); let h = new Set; h.add(E); let B = 0; for (; B < t;) { B += s[E].length; let v = []; for (let [f, p] of Object.entries(s)) p.start === s[E].end && v.push(f); if (0 === v.length) break; let _ = v.filter(e => !h.has(e))[Math.floor(Math.random() * v.filter(e => !h.has(e)).length)]; _ || (_ = v[Math.floor(Math.random() * v.length)]), $.push(_), E = _, h.add(E) } o.push($) } return { streetNames: d, streetMap: s, carPaths: o } } function generateStreetName() { if (1 == document.getElementById("names").value) return "street"; let e = ["rue", "avenue", "boulevard", "place", "square", "lane", "road", "street", "rruga", "bulevardi", "sheshi", "rrethi", "bulevard", "buleva"], t = ["de", "d'", "du", "des", "le", "la", "les"], n = ["paris", "berlin", "london", "rome", "athens", "moscow", "tokyo", "newyork", "lisbon", "madrid", "cairo", "beijing", "sydney", "rio", "prishtina"], l = e[Math.floor(Math.random() * e.length)], a = n[Math.floor(Math.random() * n.length)], r = l + " "; return .5 > Math.random() && (r += t[Math.floor(Math.random() * t.length)] + " "), r += a, r = r.replace(/\s/g, "_") } function preset(e) { switch (e) { case "downtownrush": document.getElementById("duration").value = 120, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 5, document.getElementById("totalCars").value = 500, document.getElementById("bonusPoints").value = 800, document.getElementById("maxStreetsInPath").value = 4; break; case "suburbanserenity": document.getElementById("duration").value = 70, document.getElementById("intersections").value = 80, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 300, document.getElementById("bonusPoints").value = 300, document.getElementById("maxStreetsInPath").value = 3; break; case "industrialhustle": document.getElementById("duration").value = 200, document.getElementById("intersections").value = 120, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 5; break; case "coastalcruise": document.getElementById("duration").value = 250, document.getElementById("intersections").value = 150, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 6; break; case "mountainretreat": document.getElementById("duration").value = 147, document.getElementById("intersections").value = 90, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 4; break; case "historicjourney": document.getElementById("duration").value = 318, document.getElementById("intersections").value = 110, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 450, document.getElementById("bonusPoints").value = 400, document.getElementById("maxStreetsInPath").value = 3; break; case "metropolitanmadness": document.getElementById("duration").value = 350, document.getElementById("intersections").value = 180, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 800, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 5; break; case "ruralrespite": document.getElementById("duration").value = 110, document.getElementById("intersections").value = 70, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 200, document.getElementById("bonusPoints").value = 250, document.getElementById("maxStreetsInPath").value = 3; break; case "technologyhub": document.getElementById("duration").value = 289, document.getElementById("intersections").value = 200, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 6; break; case "universitytown": document.getElementById("duration").value = 247, document.getElementById("intersections").value = 130, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 600, document.getElementById("bonusPoints").value = 650, document.getElementById("maxStreetsInPath").value = 4; break; case "example": document.getElementById("duration").value = 6, document.getElementById("intersections").value = 4, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 2, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 15; break; case "etoile": document.getElementById("duration").value = 676, document.getElementById("intersections").value = 500, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 500, document.getElementById("maxStreetsInPath").value = 15; break; case "checkmate": document.getElementById("duration").value = 164, document.getElementById("intersections").value = 1e3, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 100, document.getElementById("maxStreetsInPath").value = 9; break; default: document.getElementById("duration").value = 400, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 3 }window.scrollTo({ top: 0, behavior: "smooth" }) } function toast(e, t = 4500, n = 0) { let l = () => { let n = document.createElement("div"); n.className = "fixed top-4 right-4 flex items-center justify-center w-64 p-4 bg-gray-900 text-white rounded-md shadow-md", n.style.padding = "12px", n.style.maxHeight = "500px", n.style.overflow = "auto", n.style.width = "fit-content", n.style.zIndex = "9999"; let l = document.createElement("span"); l.className = "whitespace-nowrap overflow-hidden overflow-ellipsis", l.textContent = e, n.appendChild(l), document.body.appendChild(n), setTimeout(() => { n.classList.add("opacity-0"), setTimeout(() => { n.remove() }, 300) }, t), toast.dismiss = function () { n.classList.add("opacity-0"), setTimeout(() => { n.remove() }, 300) } }; setTimeout(l, n) } const bugReporter = document.getElementById("bug-reporter"); bugReporter.addEventListener("click", () => { window.open("https://github.com/ErzenXz/instance-generator-traffic/issues/new", "_blank") }); const body = document.querySelector("body"), modeToggle = body.querySelector("#theme-switcher"); let getMode = localStorage.getItem("mode"); getMode && "dark" === getMode && body.classList.toggle("dark"), modeToggle.addEventListener("click", () => { body.classList.toggle("dark"), body.classList.contains("dark") ? localStorage.setItem("mode", "dark") : localStorage.setItem("mode", "light") });