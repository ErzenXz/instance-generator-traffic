let running = !1; function getRandomInt(e, t) { let n, l; return n = Math.ceil(Number(e)), Math.floor(Math.random() * ((l = Math.floor(Number(t))) - n + 1)) + n } let INPUT = "", graph = [], maxIntersections = 250, maxStreets = 500; function getData() { if (running) return alert("The engine is alerdy running, please wait..."), !1; let e = document.getElementById("duration").value, t = document.getElementById("intersections").value, n = document.getElementById("streets").value, l = document.getElementById("totalCars").value, a = document.getElementById("bonusPoints").value, s = 3, r = document.getElementById("maxStreetsInPath").value; if ((e <= 1 || e > 1e4 || "" == e) && (e = getRandomInt(1, 1e4)), (t <= 2 || t > 1e5 || "" == t) && (t = getRandomInt(2, 100)), "auto" == n) { let d = Math.floor(2 * Math.sqrt(t)); (n = Math.floor(3 * Math.floor(4 * Math.random()) + (Math.floor(2 * Math.random()) + 9) + (Math.floor(3 * Math.random()) + 7) + d + (Math.floor(Math.sin(2 * Math.random() * Math.PI) * d) + 1) + (Math.floor(Math.cos(2 * Math.random() * Math.PI) * d) + 1) + (Math.floor(Math.tan(2 * Math.random() * Math.PI) * d) + 1))) < 0 && (n *= -1), n < t && (n += t) } else n *= t; (l <= 1 || l > 1e3 || "" == l) && (l = getRandomInt(1, 500)), (a <= 1 || a > 1e3 || "" == a) && (a = getRandomInt(1, 1e3)), (s <= 3 || s > 8 || "" == s) && (s = getRandomInt(3, 27)); let o = n / 2; (r <= 2 || r > o || "" == r) && (r = getRandomInt(2, n / 2)), document.getElementById("data").classList.add("hidden"), document.getElementById("running").classList.remove("hidden"), document.getElementById("loading").classList.remove("hidden"), console.time("Generation time"); "1" == document.getElementById("engine").value ? setTimeout(() => { generateInputFile(e, t, n, l, a, s, r) }, 500) : setTimeout(() => { generateInputFile2(e, t, n, l, a, s, r) }, 500) } function generateInputFile(e, t, n, l, a, s, r) {
    running = !0; let d = performance.now(), o = ""; o += `${e} ${t} ${n} ${l} ${a}
`; let i = 0, m = 0, g = new Set, u = Math.floor(e / 7); for (let y = 0; y < n; y++) { if (0 == y % t) for (i = getRandomInt(1, 3), m = getRandomInt(1, 3); i == m;)m = getRandomInt(1, 3); let I; if (1 == getRandomInt(1, 2)) { let c = y % t, E = (y % t + i) % t; c == E && (E = (y % t + m) % t), I = `${c} ${E} ${generateStreetName()}${y} ${getRandomInt(1, u)}` } else { let B = y % t, $ = (y % t + m) % t; B == $ && ($ = (y % t + i) % t), I = `${B} ${$} ${generateStreetName()}${y} ${getRandomInt(1, u)}` } let v = h(I); g.has(I) || g.has(v) || g.add(I) } function h(e) { let t = e.split(" "); return t[1] + " " + t[0] + " " + t[2] + " " + t[3] } let f = Array.from(g); f.sort(() => Math.random() - .5), f.forEach(e => {
        o += `${e}
`, t < maxIntersections && n < maxStreets && graph.push(e)
    }); let _ = generateCarPaths(INPUT = o, r), p = ""; for (let b = 0; b < _.length; b++) {
        let P = _[b], x = `${P.length} ${P.join(" ")}
`; INPUT += x, p += x
    } if (document.getElementById("cy").innerHTML = "", document.getElementById("cy1").innerHTML = "", document.getElementById("cy2").innerHTML = "", document.getElementById("textArea").value = "", t < maxIntersections && n < maxStreets) { let L = graph.join("\n"), w = p; try { createGraph(L, "cy"), document.getElementById("cy").classList.remove("hidden") } catch (S) { console.log("Error creating graph"), document.getElementById("cy").classList.add("hidden") } try { document.getElementById("cy2").classList.remove("hidden"), generateGraph2(w) } catch (k) { console.log("Error creating graph of cars"), document.getElementById("cy2").classList.add("hidden") } try { generateGraph(L), document.getElementById("cy1").classList.remove("hidden") } catch (C) { console.log("Error creating graph"), document.getElementById("cy1").classList.add("hidden") } document.getElementById("download").classList.remove("hidden") } else document.getElementById("textArea").classList.remove("hidden"), document.getElementById("download").classList.remove("hidden"), document.getElementById("textArea").value = INPUT; console.timeEnd("Generation time"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"); let T; toast(`Generation time: ${((performance.now() - d) / 1e3).toFixed(2)} seconds`), running = !1
} function generateInputFile2(e, t, n, l, a, s, r) {
    running = !0; let d = performance.now(), o = ""; o += `${e} ${t} ${n} ${l} ${a}
`; let i = 0, m = new Set, g = Math.floor(e / 7); for (let u = 0; u < n; u++) { 0 == u % t && (i += 1); let y = `${u % t} ${(u % t + i) % t} ${generateStreetName()}${u} ${getRandomInt(1, g)}`, I = c(y); m.has(y) || m.has(I) || m.add(y) } function c(e) { let t = e.split(" "); return t[1] + " " + t[0] + " " + t[2] + " " + t[3] } let E = Array.from(m); E.sort(() => Math.random() - .5), E.forEach(e => {
        o += `${e}
`, t < maxIntersections && n < maxStreets && graph.push(e)
    }); let B = generateCarPaths(INPUT = o, r), $ = ""; for (let v = 0; v < B.length; v++) {
        let h = B[v], f = `${h.length} ${h.join(" ")}
`; INPUT += f, $ += f
    } if (document.getElementById("cy").innerHTML = "", document.getElementById("cy1").innerHTML = "", document.getElementById("cy2").innerHTML = "", document.getElementById("textArea").value = "", t < maxIntersections && n < maxStreets) { let _ = graph.join("\n"), p = $; try { createGraph(_, "cy"), document.getElementById("cy").classList.remove("hidden") } catch (b) { console.log("Error creating graph"), document.getElementById("cy").classList.add("hidden") } try { document.getElementById("cy2").classList.remove("hidden"), generateGraph2(p) } catch (P) { console.log("Error creating graph of cars"), document.getElementById("cy2").classList.add("hidden") } try { generateGraph(_), document.getElementById("cy1").classList.remove("hidden") } catch (x) { console.log("Error creating graph"), document.getElementById("cy1").classList.add("hidden") } document.getElementById("download").classList.remove("hidden") } else document.getElementById("textArea").classList.remove("hidden"), document.getElementById("download").classList.remove("hidden"), document.getElementById("textArea").value = INPUT; console.timeEnd("Generation time"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"), document.getElementById("data").classList.remove("hidden"), document.getElementById("running").classList.add("hidden"), document.getElementById("loading").classList.add("hidden"); let L; toast(`Generation time: ${((performance.now() - d) / 1e3).toFixed(2)} seconds`), running = !1
} function generateCarPaths(e, t) { let n = e.split("\n"), [l, a, s, r, d] = n[0].split(" ").map(Number), o = {}; for (let i = 1; i <= s; i++) { let m = n[i].split(" "); o[m[2]] = { start: parseInt(m[0]), end: parseInt(m[1]), length: parseInt(m[3]) } } let g = [], u = t, y = []; u < 2 && (u = 2); for (let I = 0; I < r; I++) { let c = [], E = Math.floor(Math.random() * a), B = new Set, $ = 0, v = Math.floor(Math.random() * u) + 1; for (v < 2 && (v = 2); c.length < v;) { B.add(E); let h = []; for (let [f, _] of Object.entries(o)) _.start === E && h.push(f); if (0 === h.length) break; let p = h[Math.floor(Math.random() * h.length)]; if (c.push(p), E = o[p].end, ($ += o[p].length) > l) break } 0 == c.length && (c = [...y[Math.floor(Math.random() * y.length)]]), g.push(c), y.push(c) } return g } function downloadFile() { if ("" == INPUT) { alert("Please generate the input file first"); return } let e = document.getElementById("export").value; if ("json" == e) { let t = convertDataToJSON(INPUT), n = new Blob([t], { type: "application/json" }), l = URL.createObjectURL(n), a = document.createElement("a"); a.href = l, a.download = `D:${new Date().getTime()}.json`, document.body.appendChild(a), a.click(), document.body.removeChild(a) } else if ("yaml" == e) { let s = dataToYAML(INPUT), r = new Blob([s], { type: "application/x-yaml" }), d = URL.createObjectURL(r), o = document.createElement("a"); o.href = d, o.download = `D:${new Date().getTime()}.yml`, document.body.appendChild(o), o.click(), document.body.removeChild(o) } else { let i = new Blob([INPUT], { type: "text/plain" }), m = URL.createObjectURL(i), g = document.createElement("a"); g.href = m, g.download = `D:${new Date().getTime()}.txt`, document.body.appendChild(g), g.click(), document.body.removeChild(g) } location.reload() } function convertDataToJSON(e) { let t = e.split("\n"), n = {}, [l, a, s, r, d] = t[0].split(" ").map(Number); return n.simulation = { duration: l, intersections: a, streets: s, cars: r, bonus: d }, n.streets = getStreets(t, s), n.cars = getCars(t, s), JSON.stringify(n) } function getStreets(e, t) { let n = []; for (let l = 1; l <= t; l++) { let [a, s, r, d] = e[l].split(" "); a = Number(a), s = Number(s), d = Number(d); let o = { start: a, end: s, name: r, time: d }; n.push(o) } return n } function getCars(e, t) { let n = []; for (let l = t + 1; l < e.length; l++) { let [a, ...s] = e[l].split(" "); a = Number(a); let r = { path_length: a, path: s }; a > 1 && n.push(r) } return n } function generateStreetNetwork(e) { let [t, n, l, a, s] = e.split("\n")[0].split(" ").map(Number), r = [], d = {}, o = [], i = {}; for (let m = 0; m < l; m++) { let g = generateStreetName(); for (; r.includes(g);)g = generateStreetName(); r.push(g); let u = Math.floor(Math.random() * n), y = Math.floor(Math.random() * n); for (; u === y;)y = Math.floor(Math.random() * n); let I = Math.floor(10 * Math.random()) + 1; d[g] = { start: u, end: y, length: I }, i[u] || (i[u] = []), i[y] || (i[y] = []), i[u].push({ street: g, time: I }), i[y].push({ street: g, time: I }) } for (let c = 0; c < a; c++) { let E = [], B = r[Math.floor(Math.random() * r.length)]; E.push(B); let $ = new Set; $.add(B); let v = 0; for (; v < t;) { v += d[B].length; let h = []; for (let [f, _] of Object.entries(d)) _.start === d[B].end && h.push(f); if (0 === h.length) break; let p = h.filter(e => !$.has(e))[Math.floor(Math.random() * h.filter(e => !$.has(e)).length)]; p || (p = h[Math.floor(Math.random() * h.length)]), E.push(p), B = p, $.add(B) } o.push(E) } return { streetNames: r, streetMap: d, carPaths: o } } function generateStreetName() { if (1 == document.getElementById("names").value) return "street"; let e = ["rue", "avenue", "boulevard", "place", "square", "lane", "road", "street", "rruga", "bulevardi", "sheshi", "rrethi", "bulevard", "buleva"], t = ["de", "d'", "du", "des", "le", "la", "les"], n = ["paris", "berlin", "london", "rome", "athens", "moscow", "tokyo", "newyork", "lisbon", "madrid", "cairo", "beijing", "sydney", "rio", "prishtina"], l = e[Math.floor(Math.random() * e.length)], a = n[Math.floor(Math.random() * n.length)], s = l + " "; return .5 > Math.random() && (s += t[Math.floor(Math.random() * t.length)] + " "), s += a, s = s.replace(/\s/g, "_") } function preset(e) { switch (e) { case "downtownrush": document.getElementById("duration").value = 120, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 5, document.getElementById("totalCars").value = 500, document.getElementById("bonusPoints").value = 800, document.getElementById("maxStreetsInPath").value = 4; break; case "suburbanserenity": document.getElementById("duration").value = 70, document.getElementById("intersections").value = 80, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 300, document.getElementById("bonusPoints").value = 300, document.getElementById("maxStreetsInPath").value = 3; break; case "industrialhustle": document.getElementById("duration").value = 200, document.getElementById("intersections").value = 120, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 5; break; case "coastalcruise": document.getElementById("duration").value = 250, document.getElementById("intersections").value = 150, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 6; break; case "mountainretreat": document.getElementById("duration").value = 147, document.getElementById("intersections").value = 90, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 400, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 4; break; case "historicjourney": document.getElementById("duration").value = 318, document.getElementById("intersections").value = 110, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 450, document.getElementById("bonusPoints").value = 400, document.getElementById("maxStreetsInPath").value = 3; break; case "metropolitanmadness": document.getElementById("duration").value = 350, document.getElementById("intersections").value = 180, document.getElementById("streets").value = 6, document.getElementById("totalCars").value = 800, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 5; break; case "ruralrespite": document.getElementById("duration").value = 110, document.getElementById("intersections").value = 70, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 200, document.getElementById("bonusPoints").value = 250, document.getElementById("maxStreetsInPath").value = 3; break; case "technologyhub": document.getElementById("duration").value = 289, document.getElementById("intersections").value = 200, document.getElementById("streets").value = "auto", document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 6; break; case "universitytown": document.getElementById("duration").value = 247, document.getElementById("intersections").value = 130, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 600, document.getElementById("bonusPoints").value = 650, document.getElementById("maxStreetsInPath").value = 4; break; case "example": document.getElementById("duration").value = 6, document.getElementById("intersections").value = 4, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 2, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 15; break; case "etoile": document.getElementById("duration").value = 676, document.getElementById("intersections").value = 500, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 500, document.getElementById("maxStreetsInPath").value = 15; break; case "checkmate": document.getElementById("duration").value = 164, document.getElementById("intersections").value = 1e3, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 1e3, document.getElementById("bonusPoints").value = 100, document.getElementById("maxStreetsInPath").value = 9; break; case "rome": document.getElementById("duration").value = 178, document.getElementById("intersections").value = 1387, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 478, document.getElementById("bonusPoints").value = 250, document.getElementById("maxStreetsInPath").value = 15; break; case "paris": document.getElementById("duration").value = 157, document.getElementById("intersections").value = 1770, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 800, document.getElementById("bonusPoints").value = 700, document.getElementById("maxStreetsInPath").value = 7; break; case "london": document.getElementById("duration").value = 75, document.getElementById("intersections").value = 7e3, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 147, document.getElementById("bonusPoints").value = 100, document.getElementById("maxStreetsInPath").value = 45; break; case "manhattan": document.getElementById("duration").value = 85, document.getElementById("intersections").value = 2862, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 350, document.getElementById("bonusPoints").value = 100, document.getElementById("maxStreetsInPath").value = 25; break; case "bronx": document.getElementById("duration").value = 175, document.getElementById("intersections").value = 1768, document.getElementById("streets").value = 4, document.getElementById("totalCars").value = 147, document.getElementById("bonusPoints").value = 250, document.getElementById("maxStreetsInPath").value = 8; break; case "bronoklyn": document.getElementById("duration").value = 89, document.getElementById("intersections").value = 4848, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 123, document.getElementById("bonusPoints").value = 555, document.getElementById("maxStreetsInPath").value = 46; break; case "queens": document.getElementById("duration").value = 126, document.getElementById("intersections").value = 3432, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 546, document.getElementById("bonusPoints").value = 561, document.getElementById("maxStreetsInPath").value = 21; break; case "sisland": document.getElementById("duration").value = 45, document.getElementById("intersections").value = 633, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 431, document.getElementById("bonusPoints").value = 123, document.getElementById("maxStreetsInPath").value = 52; break; default: document.getElementById("duration").value = 400, document.getElementById("intersections").value = 100, document.getElementById("streets").value = 3, document.getElementById("totalCars").value = 100, document.getElementById("bonusPoints").value = 1e3, document.getElementById("maxStreetsInPath").value = 3 }window.scrollTo({ top: 0, behavior: "smooth" }) } function toast(e, t = 4500, n = 0) { let l = () => { let n = document.createElement("div"); n.className = "fixed top-4 right-4 flex items-center justify-center w-64 p-4 bg-gray-900 text-white rounded-md shadow-md", n.style.padding = "12px", n.style.maxHeight = "500px", n.style.overflow = "auto", n.style.width = "fit-content", n.style.zIndex = "9999"; let l = document.createElement("span"); l.className = "whitespace-nowrap overflow-hidden overflow-ellipsis", l.textContent = e, n.appendChild(l), document.body.appendChild(n), setTimeout(() => { n.classList.add("opacity-0"), setTimeout(() => { n.remove() }, 300) }, t), toast.dismiss = function () { n.classList.add("opacity-0"), setTimeout(() => { n.remove() }, 300) } }; setTimeout(l, n) } const bugReporter = document.getElementById("bug-reporter"); bugReporter.addEventListener("click", () => { window.open("https://github.com/ErzenXz/instance-generator-traffic/issues/new", "_blank") }); const body = document.querySelector("body"), modeToggle = body.querySelector("#theme-switcher"); let getMode = localStorage.getItem("mode"); getMode && "dark" === getMode && body.classList.toggle("dark"), modeToggle.addEventListener("click", () => { body.classList.toggle("dark"), body.classList.contains("dark") ? localStorage.setItem("mode", "dark") : localStorage.setItem("mode", "light") });